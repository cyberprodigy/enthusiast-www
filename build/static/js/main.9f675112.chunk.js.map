{"version":3,"sources":["img/logo.svg","io.enthusiast.businesscard/Card.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","Card","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","cardElem","state","React","createRef","State","isOpened","setState","_this2","react_default","a","createElement","className","onClick","openClose","src","require","alt","href","target","Component","openText","App","src_io_enthusiast_businesscard_Card","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2JAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uKCKlCC,qBAKF,SAAAA,EAAYC,GACZ,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACIE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KALVQ,cAIA,EAAAP,EAHAQ,WAGA,EAEIR,EAAKO,SAAWE,IAAMC,YACtBV,EAAKQ,MAAQ,IAAIG,EAHrBX,yEAMUY,GAENT,KAAKU,SAAS,CAAED,SAAUA,qCAK9B,IAAAE,EAAAX,KACI,OAAOY,EAAAC,EAAAC,cAAA,OAAKC,UAAWf,KAAKK,MAAMI,SAAW,oBAAsB,aAC/DG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAEXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,QAAS,kBAAML,EAAKM,WAAU,KAAxD,cAIJL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKI,IAAKC,EAAQ,IAAoBJ,UAAU,OAAOK,IAAI,SAC3DR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,sBAEJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAYC,QAAS,kBAAML,EAAKM,WAAU,KAA1D,KACAL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,mBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,kBAEJH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBACVH,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGO,KAAK,0CAA0CC,OAAO,SAAzD,gDA5CbC,cAsDbf,wCAEFC,UAAoB,OACpBe,SAAmB,IAGR7B,ICnDA8B,0LANX,OAAOb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACpBH,EAAAC,EAAAC,cAACY,EAAD,cALYH,cCQEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9f675112.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.de414cd6.svg\";","import React, { Component, RefObject } from 'react';\nimport './Card.css'\nimport { stat } from 'fs';\n\n\nclass Card extends Component\n{\n    cardElem: RefObject<HTMLDivElement>;\n    state: State;\n\n    constructor(props: any)\n    {\n        super(props);\n        this.cardElem = React.createRef();\n        this.state = new State();\n    }\n\n    openClose(isOpened: Boolean)\n    {\n        this.setState({ isOpened: isOpened });\n    }\n\n    \n    render()\n    {\n        return <div className={this.state.isOpened ? \"flip-card flipped\" : \"flip-card\"}>\n            <div className=\"flip-card-inner\">\n                <div className=\"flip-card-front\" \n                >\n                    <div className=\"open-btn\" onClick={() => this.openClose(true)}>\n                        OPEN HERE\n                    </div>\n                </div>\n                <div className=\"flip-card-back Card\">\n                    <div className=\"left\">\n                        <img src={require('../img/logo.svg')} className=\"logo\" alt=\"logo\" />\n                        <div className=\"company-name\">Enthusiast Studio</div>\n                    </div>\n                    <div className=\"card-side right\">\n                        <span className=\"close-btn\" onClick={() => this.openClose(false)}>x</span>\n                        <div className=\"top-fields\">\n                            <h1 className=\"name\">Jekabs Karklins</h1>\n                            <h2 className=\"title\">Web Developer</h2>\n                        </div>\n                        <ul className=\"bottom-fields\">\n                            <li>Copenhagen, Denmark</li>\n                            <li>+45 42713777</li>\n                            <li>jekabs@enthusiast.io</li>\n                            <li>enthusiast.io</li>\n                            <li><a href=\"https://linkedin.com/in/jekabs-karklins\" target=\"blank\">linkedin.com/in/jekabs-karklins</a></li>\n                        </ul>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    }\n};\n\nclass State\n{\n    isOpened: Boolean = false;\n    openText: String = \"\";\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport Card from './io.enthusiast.businesscard/Card'\nimport './App.css';\n\nclass App extends Component\n{\n  render()\n  {\n    return <div className=\"App\">\n      <Card />\n    </div>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}